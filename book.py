import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
import datetime
import json
import os
from admin import handle_admin_view, handle_cancel_booking  # –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ admin.py

bot = telebot.TeleBot('8049113028:AAGOtbAF0wp1-jITP17sD_lgNVNj59DmyhU')

# ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∞–±–æ –≥—Ä—É–ø–∏
ADMIN_CHAT_ID = '7509368619'

user_states = {}
booked_dates = {}
BOOKED_DATES_FILE = 'booked_dates.json'

def load_booked_dates():
    if os.path.exists(BOOKED_DATES_FILE):
        with open(BOOKED_DATES_FILE, 'r') as file:
            try:
                dates = json.load(file)
                return dates
            except json.JSONDecodeError:
                return {}
    return {}

def save_booked_dates():
    with open(BOOKED_DATES_FILE, 'w') as file:
        json.dump(booked_dates, file, indent=4)

booked_dates = load_booked_dates()

def create_main_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = KeyboardButton("üìÖ –ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è")
    btn2 = KeyboardButton("üç∏ –ú–µ–Ω—é")
    btn3 = KeyboardButton("üåê –°–æ—Ü –º–µ—Ä–µ–∂—ñ")
    btn4 = KeyboardButton("üìû –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä")
    btn5 = KeyboardButton("‚ö†Ô∏è –ü—Ä–∞–≤–∏–ª–∞")
    btn_main_menu = KeyboardButton("‚≠ê –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
    markup.add(btn1, btn2, btn3, btn4, btn5, btn_main_menu)
    return markup

@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = create_main_menu()
    photo_url = 'https://bartrigger.com.ua/content/uploads/images/fresh-cocktails-with-ice-lemon-lime-fruits-generative-ai.jpg'
    welcome_text = """
üç∏ –ü—Ä–∏–≤—ñ—Ç! –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ Vilnyi ‚Äì –º—ñ—Å—Ü—è, –¥–µ –∫–æ–∂–µ–Ω –∫–æ–≤—Ç–æ–∫ –Ω–∞–ø–æ–≤–Ω–µ–Ω–∏–π —Å–≤–æ–±–æ–¥–æ—é! üçπ

–ú–∏ —Ä–∞–¥—ñ –≤—ñ—Ç–∞—Ç–∏ —Ç–µ–±–µ –≤ –Ω–∞—à–æ–º—É –±–∞—Ä—ñ. –¢—É—Ç —Ç–∏ –∑–Ω–∞–π–¥–µ—à —à–∏—Ä–æ–∫–∏–π –∞—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –Ω–∞–ø–æ—ó–≤ –¥–ª—è –±—É–¥—å-—è–∫–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ—é. –û–±–∏—Ä–∞–π, –∑–∞–º–æ–≤–ª—è–π —Ç–∞ –Ω–∞—Å–æ–ª–æ–¥–∂—É–π—Å—è —Å–º–∞–∫–æ–º!

–ß–µ—Ä–µ–∑ –º–µ–Ω—é —Ç–∏ –º–æ–∂–µ—à –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —Å—Ç—ñ–ª —Ç–∞ –æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—è –∑ –ø—Ä–∞–≤–∏–ª–∞–º–∏ –Ω–∞—à–æ–≥–æ –∑–∞–∫–ª–∞–¥—É. –ì–∞—Ä–Ω–æ–≥–æ –≤—ñ–¥–ø–æ—á–∏–Ω–∫—É!

–ó –ø–æ–≤–∞–≥–æ—é, –∫–æ–º–∞–Ω–¥–∞ ¬´Bar Vilnyi¬ª
    """
    bot.send_photo(message.chat.id, photo=photo_url, caption=welcome_text, reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "üç∏ –ú–µ–Ω—é")
def ask_to_open_menu(message):
    menu_url = "https://gastrobar-vilnii.ps.me"
    markup = InlineKeyboardMarkup()
    open_button = InlineKeyboardButton("–í—ñ–¥–∫—Ä–∏—Ç–∏ –≤ –±—Ä–∞—É–∑–µ—Ä—ñ", url=menu_url)
    markup.add(open_button)
    bot.reply_to(message, "–ë–∞–∂–∞—î—Ç–µ –≤—ñ–¥–∫—Ä–∏—Ç–∏ –º–µ–Ω—é –≤ –±—Ä–∞—É–∑–µ—Ä—ñ?", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "üåê –°–æ—Ü –º–µ—Ä–µ–∂—ñ")
def ask_to_open_social_networks(message):
    markup = InlineKeyboardMarkup()
    instagram_button = InlineKeyboardButton("üì∏ Instagram", url="https://www.instagram.com/barvilnyi?igsh=NGNmODBkNDht–óDFo")
    markup.add(instagram_button)
    bot.reply_to(message, "–û–±–µ—Ä—ñ—Ç—å —Å–æ—Ü–º–µ—Ä–µ–∂—É:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "üìû –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä")
def ask_to_call_admin(message):
    bot.reply_to(message, "–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: +380963332020")

@bot.message_handler(func=lambda message: message.text == "‚ö†Ô∏è –ü—Ä–∞–≤–∏–ª–∞")
def show_rules(message):
    rules_text = """
    –ü—Ä–∞–≤–∏–ª–∞:
    1. –ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —Å—Ç–æ–ª–∏–∫—ñ–≤ —É ¬´Vilnyi bar¬ª –∑–¥—ñ–π—Å–Ω—é—î—Ç—å—Å—è —á–µ—Ä–µ–∑ —Ü–µ–π —á–∞—Ç-–±–æ—Ç 
—ñ –Ω–µ –¥–∞—î –ø—Ä–∞–≤–∞ –≤—ñ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è, —Ç–∞–∫ —è–∫ –ø—Ä–µ–¥—Å—Ç–∞–≤–Ω–∏–∫–∏ ¬´Vilnyi Bar¬ª –º–æ–∂—É—Ç—å –≤—ñ–¥–º–æ–≤–∏—Ç–∏ —É –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–Ω—ñ –æ—Å–æ–±–∞–º, —è–∫—ñ:
- –ø–µ—Ä–µ–±—É–≤–∞—é—Ç—å —É —Å—Ç–∞–Ω—ñ –Ω–∞–¥–º—ñ—Ä–Ω–æ–≥–æ –∞–ª–∫–æ–≥–æ–ª—å–Ω–æ–≥–æ —Å–ø'—è–Ω—ñ–Ω–Ω—è —á–∏ –Ω–∞—Ä–∫–æ—Ç–∏—á–Ω–æ–≥–æ —Å–ø'—è–Ω—ñ–Ω–Ω—è.
- –≤–µ–¥—É—Ç—å —Å–µ–±–µ –∞–≥—Ä–µ—Å–∏–≤–Ω–æ —Ç–∞ –æ–±—Ä–∞–∑–ª–∏–≤–æ –ø–æ –≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—é –¥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–Ω–∏–∫—ñ–≤ –±–∞—Ä—É —ñ –≥–æ—Å—Ç–µ–π.
- –ù–µ —Ä–æ–∑–¥—ñ–ª—è—é—Ç—å –Ω–∞—à–∏—Ö –ø–æ–≥–ª—è–¥—ñ–≤ —Å—Ç–æ—Å–æ–≤–Ω–æ –≤—ñ–¥—Å—É—Ç–Ω–æ—Å—Ç—ñ —à–æ—Ç—ñ–≤ –Ω–∞ –±–∞—Ä—ñ —ñ —Å—É—à–∏ –≤ –º–µ–Ω—é  

    2. –ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —Å—Ç—ñ–ª —É –ø'—è—Ç–Ω–∏—Ü—é —Ç–∞ —Å—É–±–æ—Ç—É –º–æ–∂–Ω–∞ –Ω–∞ 2 –≥–æ–¥–∏–Ω–∏ –º–∞–∫—Å–∏–º—É–º –¥–ª—è –æ–¥–Ω—ñ—î—ó –∫–æ–º–ø–∞–Ω—ñ—ó, –¥–∞–ª—ñ –≥–æ—Å—Ç—ñ –º–æ–∂—É—Ç—å —Ä–æ–∑–º—ñ—Å—Ç–∏—Ç–∏—Å—è –±—ñ–ª—è –±–∞—Ä–Ω–æ—ó —Å—Ç—ñ–π–∫–∏. 
    –ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —Å—Ç–æ–ª—ñ–≤ –Ω–∞ —Ä—ñ–∑–Ω—ñ —á–∞—Å–æ–≤—ñ —ñ–Ω—Ç–µ—Ä–≤–∞–ª–∏ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ. ( –Ø–∫—â–æ –≤–∏ –±–∞–∂–∞—î—Ç–µ –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —Å—Ç—ñ–ª –±—ñ–ª—å—à–µ –Ω—ñ–∂ –Ω–∞ 2 –≥–æ–¥–∏–Ω–∏- –∑–≤ º—è–∂—ñ—Ç—å—Å—è –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—î—é)

    3. –†–µ–∑–µ—Ä–≤ –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è –ø—Ä–æ—Ç—è–≥–æ–º 15 —Ö–≤–∏–ª–∏–Ω –ø—ñ—Å–ª—è –∑–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ–≥–æ —á–∞—Å—É –ø—ñ—Å–ª—è –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è 15 —Ö–≤. –≤—ñ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∞–Ω—É–ª—é—î—Ç—å—Å—è. 

    4. –ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –º—ñ—Å—Ü—å –∑–∞ –±–∞—Ä–æ–º –Ω–µ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–æ.
–ü—Ä–µ–¥—Å—Ç–∞–≤–Ω–∏–∫–∏ ¬´ Vilnyi Bar¬ª –º–æ–∂—É—Ç—å –≤—ñ–¥–º–æ–≤–∏—Ç–∏ —É –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–Ω—ñ, –∑–≤–∞–∂–∞—é—á–∏ –Ω–∞ –ø–µ—Ä–µ–ø–æ–≤–Ω–µ–Ω–∏–π –±–∞—Ä ‚Äì —â–æ –∑–≥–æ–¥–æ–º –º–æ–∂–µ –ø—Ä–∏–∑–≤–µ—Å—Ç–∏ –¥–æ –Ω–µ–∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–≥–æ –ø–µ—Ä–µ–±—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –≥–æ—Å—Ç–µ–π.

    5. –ö–æ–º–ø–∞–Ω—ñ—è –±—ñ–ª—å—à–µ 4 –æ—Å—ñ–± –Ω–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –º—ñ—Å—Ü—è –∑–∞ –±–∞—Ä–æ–º, –Ω–∞–≤—ñ—Ç—å –∑–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –≤—ñ–ª—å–Ω–∏—Ö –º—ñ—Å—Ü—å.

    6. –§–æ—Ä–º–∞—Ç –æ–¥—è–≥—É: –≤—ñ–ª—å–Ω–∏–π

    7.  –£ ¬´Bar Vilnyi¬ª –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ:
- –ø–∞–ª–∏—Ç–∏ 
- –ø–µ—Ä–µ–±—É–≤–∞—Ç–∏ –≤ –∑–æ–Ω—ñ —Å–µ—Ä–≤—ñ—Å-–±–∞—Ä—É —Ç–∞ –ø—Ä–æ—Ö–æ–¥–∞—Ö, –∑–∞–≤–∞–∂–∞—é—á–∏ –ø–µ—Ä–µ—Å—É–≤–∞—Ç–∏—Å—è –∫–æ–º–∞–Ω–¥—ñ –±–∞—Ä—É.
- —á—ñ–ø–∞—Ç–∏ —Ä—É–∫–∞–º–∏ –±–∞—Ä–Ω–∏–π —ñ–Ω–≤–µ–Ω—Ç–∞—Ä –±–µ–∑ –¥–æ–∑–≤–æ–ª—É –±–∞—Ä–º–µ–Ω–∞;
- –ø—Ä–µ–¥—Å—Ç–∞–≤–Ω–∏–∫–∏ –±–∞—Ä—É –º–∞—é—Ç—å –ø—Ä–∞–≤–æ –≤—ñ–¥–º–æ–≤–∏—Ç–∏ –≥–æ—Å—Ç—é —É –ø–æ–¥–∞–ª—å—à–æ–º—É –ø—Ä–æ–¥–∞–∂—É –∞–ª–∫–æ–≥–æ–ª—å–Ω–æ—ó –ø—Ä–æ–¥—É–∫—Ü—ñ—ó —É —Ä–∞–∑—ñ –π–æ–≥–æ –ø–µ—Ä–µ–±—É–≤–∞–Ω–Ω—è ¬´–Ω–∞ –º–µ–∂—ñ —Å–ø'—è–Ω—ñ–Ω–Ω—è¬ª –∑ –º–µ—Ç–æ—é –±–µ–∑–ø–µ–∫–∏ —Å–∞–º–æ–≥–æ –≥–æ—Å—Ç—è.
–£ —Ä–∞–∑—ñ –ø–æ—Ä—É—à–µ–Ω–Ω—è –ø—Ä–∞–≤–∏–ª —Ç–∞ –ø–æ–ª–æ–∂–µ–Ω—å –ø—Ä–µ–¥—Å—Ç–∞–≤–Ω–∏–∫–∏ –±–∞—Ä—É –±—É–¥—É—Ç—å –∑–º—É—à–µ–Ω—ñ —Ä–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –≥–æ—Å—Ç–µ–π —ñ –æ—Å—Ç–∞–Ω–Ω—ñ –Ω–µ–≥–∞–π–Ω–æ –∑–∞–ª–∏—à–∞—é—Ç—å "Bar Vilnyi".

    –ó –ø–æ–≤–∞–≥–æ—é, –∫–æ–º–∞–Ω–¥–∞ ¬´Bar Vilnyi¬ª

    """
    bot.reply_to(message, rules_text)

@bot.message_handler(func=lambda message: message.text == "üìÖ –ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è")
#def ask_for_date(message):
    available_dates = get_next_dates(5)
    date_buttons = ReplyKeyboardMarkup(resize_keyboard=True)

    for i in range(0, len(available_dates), 2):
        row = []
        for j in range(2):
            if i + j < len(available_dates):
                row.append(KeyboardButton(available_dates[i + j].strftime("%d-%m-%Y")))
        date_buttons.add(*row)

    date_buttons.add(KeyboardButton("‚≠ê –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"))
    
    user_states[message.from_user.id] = {'step': 'waiting_for_date'}
    bot.reply_to(message, "–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –¥–ª—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è:", reply_markup=date_buttons)

def get_next_dates(num_days):
    today = datetime.date.today()
    return [today + datetime.timedelta(days=i) for i in range(num_days)]

@bot.message_handler(func=lambda message: message.text == "‚≠ê –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
def handle_main_menu_button(message):
    markup = create_main_menu()
    bot.send_message(message.chat.id, "–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text in [date.strftime("%d-%m-%Y") for date in get_next_dates(5)], content_types=['text'])
def handle_date_selection(message):
    if message.text == "‚≠ê –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
        handle_main_menu_button(message)
        return
    
    user_id = message.from_user.id
    selected_date = message.text

    user_states[user_id]['selected_date'] = selected_date
    user_states[user_id]['step'] = 'waiting_for_table_selection'
    
    table_buttons = ReplyKeyboardMarkup(resize_keyboard=True)
    table_buttons.add(KeyboardButton("1 —Å—Ç—ñ–ª (6 –º—ñ—Å—Ü—å)"), KeyboardButton("2 —Å—Ç—ñ–ª (2 –º—ñ—Å—Ü—è)"))
    table_buttons.add(KeyboardButton("3 —Å—Ç—ñ–ª (4 –º—ñ—Å—Ü—è)"), KeyboardButton("4 —Å—Ç—ñ–ª (2 –º—ñ—Å—Ü—è)"))
    table_buttons.add(KeyboardButton("5 —Å—Ç—ñ–ª (6 –º—ñ—Å—Ü—å)"), KeyboardButton("6 —Å—Ç—ñ–ª (4 –º—ñ—Å—Ü—è)"))
    table_buttons.add(KeyboardButton("‚≠ê –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"))

    bot.reply_to(message, "–û–±–µ—Ä—ñ—Ç—å —Å—Ç—ñ–ª:", reply_markup=table_buttons)

@bot.message_handler(func=lambda message: message.text in ["1 —Å—Ç—ñ–ª (6 –º—ñ—Å—Ü—å)", "2 —Å—Ç—ñ–ª (2 –º—ñ—Å—Ü—è)", "3 —Å—Ç—ñ–ª (4 –º—ñ—Å—Ü—è)", "4 —Å—Ç—ñ–ª (2 –º—ñ—Å—Ü—è)", "5 —Å—Ç—ñ–ª (6 –º—ñ—Å—Ü—å)", "6 —Å—Ç—ñ–ª (4 –º—ñ—Å—Ü—è)"])
def handle_table_selection(message):
    if message.text == "‚≠ê –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
        handle_main_menu_button(message)
        return
    
    user_id = message.from_user.id
    selected_table = message.text

    user_states[user_id]['selected_table'] = selected_table
    user_states[user_id]['step'] = 'waiting_for_time'
    
    time_buttons = ReplyKeyboardMarkup(resize_keyboard=True)
    time_buttons.add(KeyboardButton("–û–ë–Ü–î"), KeyboardButton("–í–ï–ß–Ü–†"))
    time_buttons.add(KeyboardButton("‚≠ê –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"))

    bot.reply_to(message, "–û–±–µ—Ä—ñ—Ç—å —á–∞—Å (–û–ë–Ü–î, –í–ï–ß–Ü–†):", reply_markup=time_buttons)

@bot.message_handler(func=lambda message: message.text in ["–û–ë–Ü–î", "–í–ï–ß–Ü–†"])
def handle_time_selection(message):
    if message.text == "‚≠ê –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
        handle_main_menu_button(message)
        return

    user_id = message.from_user.id
    selected_time = message.text
    user_states[user_id]['selected_time'] = selected_time
    user_states[user_id]['step'] = 'waiting_for_final_time'

    if selected_time == "–û–ë–Ü–î":
        available_times = get_available_times(12, 16, user_states[user_id]['selected_date'], user_states[user_id]['selected_table'])
    else:  
        available_times = get_available_times(16, 21, user_states[user_id]['selected_date'], user_states[user_id]['selected_table'])

    time_buttons = ReplyKeyboardMarkup(resize_keyboard=True)
    for time in available_times:
        time_buttons.add(KeyboardButton(time.strftime("%H:%M")))

    time_buttons.add(KeyboardButton("–ù–∞–∑–∞–¥"), KeyboardButton("‚≠ê –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"))

    bot.reply_to(message, "–û–±–µ—Ä—ñ—Ç—å —Ç–æ—á–Ω–∏–π —á–∞—Å:", reply_markup=time_buttons)

def get_available_times(start_hour, end_hour, selected_date, selected_table):
    times = []
    for hour in range(start_hour, end_hour):
        for minute in [0]:
            time = datetime.time(hour)
            time_to_check = datetime.datetime.combine(datetime.date.today(), time)
            if check_if_time_available(selected_date, time_to_check.strftime("%H:%M"), selected_table):
                times.append(time_to_check)
    return times

def check_if_time_available(selected_date, selected_time, selected_table):
    global booked_dates
    booked_dates = load_booked_dates()  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –≤—ã–∑–æ–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏

    for key in booked_dates:
        if selected_date in key and selected_time in key and selected_table in key:
            return False
    return True


@bot.message_handler(func=lambda message: user_states.get(message.from_user.id, {}).get('step') == 'waiting_for_final_time')
def handle_final_time_selection(message):
    user_id = message.from_user.id

    if message.text == "‚≠ê –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
        handle_main_menu_button(message)
        return

    if message.text == "–ù–∞–∑–∞–¥":
        user_states[user_id]['step'] = 'waiting_for_time'
        time_buttons = ReplyKeyboardMarkup(resize_keyboard=True)
        time_buttons.add(KeyboardButton("–û–ë–Ü–î"), KeyboardButton("–í–ï–ß–Ü–†"))
        time_buttons.add(KeyboardButton("‚≠ê –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"))
        bot.reply_to(message, "–û–±–µ—Ä—ñ—Ç—å —á–∞—Å (–û–ë–Ü–î, –í–ï–ß–Ü–†):", reply_markup=time_buttons)
        return

    selected_time = message.text
    user_states[user_id]['final_time'] = selected_time
    user_states[user_id]['step'] = 'waiting_for_period'

    period_buttons = ReplyKeyboardMarkup(resize_keyboard=True)
    period_buttons.add(KeyboardButton("1 –≥–æ–¥–∏–Ω–∞"), KeyboardButton("2 –≥–æ–¥–∏–Ω–∏"))
    period_buttons.add(KeyboardButton("‚≠ê –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"))

    bot.reply_to(message, "–ù–∞ —è–∫–∏–π –ø–µ—Ä—ñ–æ–¥ –ø–æ—Ç—Ä—ñ–±–µ–Ω —Å—Ç–æ–ª–∏–∫? 1 –≥–æ–¥–∏–Ω–∞ —á–∏ 2 –≥–æ–¥–∏–Ω–∏?", reply_markup=period_buttons)

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id, {}).get('step') == 'waiting_for_period')
def handle_period_selection(message):
    if message.text == "‚≠ê –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
        handle_main_menu_button(message)
        return

    user_id = message.from_user.id
    selected_period = message.text

    if selected_period not in ["1 –≥–æ–¥–∏–Ω–∞", "2 –≥–æ–¥–∏–Ω–∏"]:
        bot.reply_to(message, "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å 1 –∞–±–æ 2 –≥–æ–¥–∏–Ω–∏.")
        return

    user_states[user_id]['selected_period'] = selected_period
    user_states[user_id]['step'] = 'waiting_for_name'

    bot.reply_to(message, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:")

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id, {}).get('step') == 'waiting_for_name')
def handle_name_input(message):
    if message.text == "‚≠ê –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
        handle_main_menu_button(message)
        return

    user_id = message.from_user.id
    user_name = message.text
    user_states[user_id]['name'] = user_name

    contact_button = ReplyKeyboardMarkup(resize_keyboard=True)
    contact_button.add(KeyboardButton("–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True))
    contact_button.add(KeyboardButton("‚≠ê –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"))

    user_states[user_id]['step'] = 'waiting_for_contact'
    bot.reply_to(message, "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—ó–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É:", reply_markup=contact_button)

@bot.message_handler(content_types=['contact'])
def handle_contact_input(message):
    user_id = message.from_user.id
    if user_states.get(user_id, {}).get('step') == 'waiting_for_contact':
        contact = message.contact.phone_number
        user_states[user_id]['phone'] = contact

        selected_date = user_states[user_id]['selected_date']
        final_time = user_states[user_id]['final_time']
        selected_period = user_states[user_id]['selected_period']
        selected_table = user_states[user_id]['selected_table']
        user_name = user_states[user_id]['name']

        booking_datetime = datetime.datetime.strptime(f"{selected_date} {final_time}", "%d-%m-%Y %H:%M")

        block_times(selected_date, final_time, selected_period, selected_table, user_name, contact)

        send_booking_to_admin(booking_datetime, user_name, selected_period, contact, selected_table)

        bot.reply_to(message, f"–í–∞—à–µ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –Ω–∞ {booking_datetime.strftime('%d-%m-%Y %H:%M')} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ –Ω–∞ {selected_period}. –ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –∑–∞ –Ω–æ–º–µ—Ä–æ–º: {contact}")

def block_times(selected_date, selected_time, selected_period, selected_table, name, phone):
    booking_datetime = datetime.datetime.strptime(f"{selected_date} {selected_time}", "%d-%m-%Y %H:%M")

    period_hours = 1 if selected_period == "1 –≥–æ–¥–∏–Ω–∞" else 2

    for hour in range(period_hours):
        time_to_block = booking_datetime + datetime.timedelta(hours=hour)
        booked_dates[f"{selected_table}_{time_to_block.strftime('%d-%m-%Y %H:%M')}"] = {
            "name": name,
            "phone": phone
        }

    save_booked_dates()

def send_booking_to_admin(booking_datetime, user_name, period, phone, table):
    bot.send_message(ADMIN_CHAT_ID, f"–ù–æ–≤–µ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è!\n–Ü–º'—è: {user_name}\n–î–∞—Ç–∞ —ñ —á–∞—Å: {booking_datetime.strftime('%d-%m-%Y %H:%M')}\n–ü–µ—Ä—ñ–æ–¥: {period}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n–°—Ç—ñ–ª: {table}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /admin_view
@bot.message_handler(commands=['admin_view'])
def admin_view(message):
    handle_admin_view(message, bot)  # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ admin.py

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /cancel_booking
@bot.message_handler(commands=['cancel_booking'])
def cancel_booking(message):
    handle_cancel_booking(message, bot)  # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ admin.py

bot.polling()
